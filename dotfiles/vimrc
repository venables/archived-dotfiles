"
" Vundle setup
set nocompatible
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
Bundle 'gmarik/vundle'

"
" Plugins

" Editor Plugins
Bundle 'scrooloose/nerdtree'
Bundle 'ddollar/nerdcommenter'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-markdown'
Bundle 'terryma/vim-multiple-cursors'
Bundle 'scrooloose/syntastic'
Bundle 'ervandew/supertab'
Bundle 'kien/ctrlp.vim'

" Search plugins
Bundle 'rking/ag.vim'

" Git Plugins
Bundle 'gregsexton/gitv'
Bundle 'tpope/vim-git'
Bundle 'tpope/vim-fugitive'

" Swift/ObjC Plugins
Bundle 'Keithbsmiley/swift.vim'
Bundle 'msanders/cocoa.vim'

" Javascript Plugins
Bundle 'othree/yajs.vim'
"Bundle 'jelera/vim-javascript-syntax'
Bundle 'briancollins/vim-jst'
Bundle 'claco/jasmine.vim'
Bundle 'elzr/vim-json'
Bundle 'moll/vim-node'
Bundle 'kchmck/vim-coffee-script'

" HTML Plugins
Bundle 'othree/html5.vim'
Bundle 'Valloric/MatchTagAlways'

" CSS Plugins
Bundle 'hail2u/vim-css3-syntax'
Bundle 'groenewege/vim-less'

" Ruby Plugins
Bundle 'tpope/vim-bundler'
Bundle 'tpope/vim-rake'
Bundle 'vim-ruby/vim-ruby'
Bundle 'skalnik/vim-vroom'
Bundle 'tpope/vim-rails'
Bundle 'tpope/vim-haml'

" Go Plugins
Bundle 'fatih/vim-go'

" Theme
Bundle 'chriskempson/base16-vim'


"
" Config

filetype plugin indent on

" Cursor
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"


"
" GUI Options
set colorcolumn=100
set gfn=Menlo\ Regular:h14
syntax on

" Remap command typos
" http://blog.sanctum.geek.nz/vim-command-typos/
if has("user_commands")
  command! -bang -nargs=? -complete=file E e<bang> <args>
  command! -bang -nargs=? -complete=file W w<bang> <args>
  command! -bang -nargs=? -complete=file Wq wq<bang> <args>
  command! -bang -nargs=? -complete=file WQ wq<bang> <args>
  command! -bang Wa wa<bang>
  command! -bang WA wa<bang>
  command! -bang Q q<bang>
  command! -bang QA qa<bang>
  command! -bang Qa qa<bang>
endif

" Disable audible bell
set visualbell

" Don't save backups
set nobackup
set nowritebackup

" Move swapfiles to /tmp
set directory=/tmp

" Set encoding
set encoding=utf-8

" Use 2 spaces for tabs
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

" Show line numbers
set number

" Highlight the current line number
set cursorline

" Show the ruler
set ruler

" Show trailing whitespace as '.'
set listchars=tab:▸\ ,trail:·
set list

" Highlight trailing whitespace
highlight RedundantWhitespace ctermbg=black guibg=black
match RedundantWhitespace /\s\+$\| \+\ze\t/

" Always display the status line
set laststatus=2

" Incrementally search, highlight
set incsearch
set hlsearch

" Search case-insensitive unless a capital is used
set ignorecase
set smartcase

" Show incomplete commands (lines highlighted, etc)
set showcmd

" Disable word wrap
set nowrap

" Speed things up
set notimeout
set ttimeout
set timeoutlen=50

" Remember last location in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

" Highlight current line only on active window
augroup BgHighlight
  autocmd!
  autocmd WinEnter * set cul
  autocmd WinLeave * set nocul
augroup END

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

"
" File types
"
au BufRead,BufNewFile {Procfile} set ft=ruby
au BufRead,BufNewFile *.jbuilder set filetype=ruby
au BufRead,BufNewFile *.json set filetype=json
au BufRead,BufNewFile *.cql set filetype=sql

"
" Custom Commands
"

" Strip html tags, leaving erb tags
command! StripTags :%s/<[^<%][^>]*>//g

" Convert Windows linebreaks to unix linebreaks
command! FixWindows :%s/\r/\r/g

"
" Mappings
"

" <Leader>w Remove all trailing whitespace in file
nnoremap <Leader>w :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" <Leader>W Remove all leading whitespace in a file
nnoremap <Leader>W :%s/^ *//g<Bar>:nohl<CR>

" <Leader>b List all active buffers.
" Example: "<Leader>b3<CR>" Open buffer 3
nnoremap <Leader>b :buffers<CR>:buffer<Space>

" <Leader>sv Source vimrc file
nnoremap <Leader>sv :source ~/.vimrc<CR>
" <Leader>ev Edit vimrc file
nnoremap <Leader>ev :e ~/.vimrc<CR>

" Map <Leader>\ to cycle through open frames
"nnoremap <Leader>\ <c-w>w

" Disable arrow keys
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>

" Fullscreen
nnoremap <Leader>f :set invfu<CR>


"
" Plugin Customizations
"

"
" vim-json
"
let g:vim_json_syntax_conceal = 0

"
" Syntastic
"
let g:syntastic_enable_signs=1
let g:syntastic_auto_jump=1
let g:syntastic_stl_format = '[%E{Err: %fe #%e}%B{, }%W{Warn: %fw #%w}]'
let g:syntastic_javascript_checkers = ['jshint']
"let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
"let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ys-"]
"let g:syntastic_disabled_filetypes = ['html']
let g:syntastic_mode_map={ 'mode': 'active',
      \ 'active_filetypes': ['js', 'css', 'less', 'json'],
      \ 'passive_filetypes': ['html'] }

"
" MatchTagAlways
"
let g:mta_filetypes = {
  \ 'html' : 1,
  \ 'xhtml' : 1,
  \ 'xml' : 1,
  \ 'ejs' : 1,
  \ 'erb' : 1
  \}


"
" Javascript libraries syntax
"
let g:used_javascript_libs = 'underscore,angularjs'

" ag.vim
" <D-F> (Command Shift F) - :Ag
nnoremap <D-F> :Ag<Space>

" CtrlP
nnoremap <D-O> :CtrlP<CR>
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

" Fugitive + Git + Gitv
nnoremap <Leader>gb :Gblame<CR>
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gd :Gdiff<CR>
nnoremap <Leader>gl :Glog<CR>
nnoremap <Leader>gc :Gcommit<CR>
nnoremap <Leader>gp :Git push<CR>
nnoremap <Leader>ga :Git add .<CR>
nnoremap <Leader>gv :Gitv<CR>
nnoremap <Leader>gf :Gitv!<CR>

" Always jump to the first line when opening a git commit message
au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

" jasmine
nnoremap <Leader>j :!grunt test_spec --no-color --spec=% --forceexit<CR>
nnoremap <Leader>J :!grunt test_spec --no-color --spec=test/ --forceexit<CR>

" NERDTree
" Open NERDTree automatically
" autocmd vimenter * if !argc() | NERDTree | endif
" Close the window if NERDTree is the only one left
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
" Map <Leader>n to toggle nerd tree
nnoremap <Leader>n :NERDTreeToggle<CR>


"
" MacVim specifics
"
if has("gui_running")
  "
  " Colorscheme
  set background=dark
  colorscheme base16-eighties

  "
  " Enable syntax highlighting
  syntax on

  "
  " Fix the window size
  set lines=50 columns=160

  " Set window transparency
  " set transparency=5

  " Fullscreen by default
  " set fu

  " Use minimal window options
  set guioptions=aAce

  " Automatically resize splits when resizing MacVim window
  autocmd VimResized * wincmd =

endif
