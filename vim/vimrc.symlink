" Vundle setup
set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim

" Plugins
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/syntastic'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-fugitive'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'kien/ctrlp.vim'
Plugin 'rking/ag.vim'
Plugin 'ervandew/supertab'
Plugin 'chriskempson/base16-vim'

call vundle#end()
" End Plugins

filetype plugin indent on

" Enable syntax highlighting
syntax on

" Colorscheme
set background=dark
colorscheme base16-tomorrow

" Set width guide
set colorcolumn=100

" Wrap gitcommit file types at the appropriate length
filetype indent plugin on

" Disable audible bell
set visualbell

" Move swapfiles to /tmp
set directory=/tmp

" Don't save backups
set nobackup
set nowritebackup

" Use 2 spaces for tabs
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

" Disable word wrap
set nowrap

" Show line numbers
set number

" Highlight current line, but only in active buffer
set cursorline
augroup BgHighlight
  autocmd!
  autocmd WinEnter * set cul
  autocmd WinLeave * set nocul
augroup END

" Always show status line
set laststatus=2

" Show current position in bottom bar (ruler)
set ruler

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Incrementally search, highlight search
set incsearch
set hlsearch

" Search case-insensitive unless a capital is used
set ignorecase
set smartcase

" Show incomplete commands (lines highlighted, etc)
set showcmd

" Speed things up
set notimeout
set ttimeout
set timeoutlen=50

" Show trailing whitespace as '.'
set listchars=tab:▸\ ,trail:·
set list

" Set insert cursor to a vertical bar
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

" Always jump to the first line when opening a git commit message
au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

" Allow frequent command typos (e.g. 'W' instead of 'w')
if has("user_commands")
  command! -bang -nargs=? -complete=file E e<bang> <args>
  command! -bang -nargs=? -complete=file W w<bang> <args>
  command! -bang -nargs=? -complete=file Wq wq<bang> <args>
  command! -bang -nargs=? -complete=file WQ wq<bang> <args>
  command! -bang Wa wa<bang>
  command! -bang WA wa<bang>
  command! -bang Q q<bang>
  command! -bang QA qa<bang>
  command! -bang Qa qa<bang>
endif

" Key mappings
nnoremap <Leader>sv :source ~/.vimrc<CR>        " <Leader>sv Source vimrc file
nnoremap <Leader>ev :e ~/.vimrc<CR>             " <Leader>ev Edit vimrc file
nnoremap <Left> :echoe "Use h"<CR>              " Disable Left key
nnoremap <Right> :echoe "Use l"<CR>             " Disable Right key
nnoremap <Up> :echoe "Use k"<CR>                " Disable Up key
nnoremap <Down> :echoe "Use j"<CR>              " Disable Down key
nnoremap <Leader>w :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR> " Remove trailing whitespace
nnoremap <Leader>b :buffers<CR>:buffer<Space>   " Show all buffers

" Grunt-specific test running commands
nnoremap <Leader>j :!grunt test_spec --no-color --spec=% --forceexit<CR>
nnoremap <Leader>J :!grunt test_spec --no-color --spec=test/ --forceexit<CR>

" Plugin: NERDTree
 " Map <Leader>n to toggle nerd tree
 nnoremap <Leader>n :NERDTreeToggle<CR>

 " Show hidden files, except .git directory
 let NERDTreeShowHidden=1
 let NERDTreeIgnore = ['\.git$']

 " Close the window if NERDTree is the only one left
 autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" Plugin: Syntastic
  let g:syntastic_enable_signs=1
  let g:syntastic_auto_jump=1
  let g:syntastic_stl_format = '[%E{Err: %fe #%e}%B{, }%W{Warn: %fw #%w}]'
  let g:syntastic_javascript_checkers = ['jshint', 'jscs']

" Plugin: ag.vim
  " <D-F> (Command Shift F) - :Ag
  nnoremap <D-F> :Ag<Space>

" Plugin: CtrlP
  nnoremap <D-O> :CtrlP<CR>
  if executable('ag')
    " Use Ag over Grep
    set grepprg=ag\ --nogroup\ --nocolor

    " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  endif

" Plugin: Fugitive
  nnoremap <Leader>gb :Gblame<CR>

" GUI options
if has("gui_running")
  " Use minimal window options
  set guioptions=aAce

  " Automatically resize splits when resizing MacVim window
  autocmd VimResized * wincmd =

  " Map <Leader>f to fullscreen
  nnoremap <Leader>f :set invfu<CR>
endif
